{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\projects\\\\fullstack-project\\\\client\\\\src\\\\components\\\\forms\\\\FormikNewRecipe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport InputCreator from \"./InputCreator\";\nimport validate from \"../utills/validateInfo\";\nimport useForm from \"../utills/useForm\";\nimport ErrorMessages from \"../utills/ErrorMessages\";\nimport { FormControl, FormCheck } from 'react-bootstrap';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from './TextField';\nimport { getData, insertDataToDB } from \"../DAL/api\";\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nconst FormikNewRecipe = ({\n  recipe,\n  editUser\n}) => {\n  _s();\n\n  const [editMode, setEditMode] = useState(false);\n  const [diets, setDiets] = useState(null);\n  const [categories, setcategories] = useState(null);\n  const [chechboxOption, setCheckboxOption] = useState([]);\n  const history = useHistory();\n  useEffect(async () => {\n    if (recipe) setEditMode(true);\n    const options = [];\n    const fetchDiets = await getData('diets');\n    const fetchCategories = await getData('categories');\n    setDiets(fetchDiets);\n    setcategories(fetchCategories);\n\n    for (let prop of fetchDiets) {\n      console.log(prop);\n      let obj = {\n        key: prop.name,\n        value: prop.id\n      };\n      options.push(obj);\n    }\n\n    setCheckboxOption(options);\n  }, []);\n  const validate = Yup.object({\n    name: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n    image: Yup.string().required('Required'),\n    email: Yup.string().email('Email is invalid').required('Email is required'),\n    password: Yup.string().min(6, 'Password must be at least 6 charaters').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must match').required('Confirm password is required'),\n    diet: Yup.array().required('required').min(2, 'must check 2 types'),\n    category: Yup.array().required('required').min(2, 'must check 2 types')\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      name: '',\n      image: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      diet: [],\n      category: []\n    },\n    validationSchema: validate,\n    onSubmit: async values => {\n      const response = await axios.post('http://localhost:3200/users', values);\n      console.log(response); // insertDataToDB('users', values).then(res => alert(res))\n\n      alert(response); // history.push('/login')\n      // console.log(res);\n      // setMessages(res)\n      // if (editMode) {\n      //   editUser(values);\n      // }\n    },\n    children: formik => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"my-4 font-weight-bold .display-4\",\n        children: \"Add Recipe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Image\",\n          name: \"lastName\",\n          type: \"file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"source\",\n          name: \"source\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"source Link\",\n          name: \"sourceUrl\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"description\",\n          name: \"description\",\n          type: \"textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"col-sm-3 text-left\",\n            children: \"Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), diets && diets.map((diet, i) => {\n            return /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"checkbox\",\n                name: \"diet\",\n                value: '' + diet.id,\n                className: \"mx-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 33\n              }, this), diet.name]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"col-sm-3 text-left\",\n            children: \"categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), categories && categories.map((diet, i) => {\n            return /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"checkbox\",\n                name: \"category\",\n                value: '' + diet.id,\n                className: \"m-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 33\n              }, this), diet.name]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          role: \"group\",\n          \"aria-labelledby\": \"my-radio-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"radio\",\n              name: \"view Permitions\",\n              value: \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this), \"public\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"radio\",\n              name: \"view Permitions\",\n              value: \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), \"private\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-dark mt-3\",\n          type: \"submit\",\n          onClick: formik.onSubmit,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger mt-3 ml-3\",\n          type: \"reset\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 13\n  }, this);\n};\n\n_s(FormikNewRecipe, \"Dn4dG+BCfTPsc27N4sUOmL9DeWU=\", false, function () {\n  return [useHistory];\n});\n\n_c = FormikNewRecipe;\nexport default FormikNewRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormikNewRecipe\");","map":{"version":3,"sources":["C:/Users/User/Documents/projects/fullstack-project/client/src/components/forms/FormikNewRecipe.js"],"names":["React","useEffect","useState","Link","useHistory","InputCreator","validate","useForm","ErrorMessages","FormControl","FormCheck","Formik","Form","Field","ErrorMessage","TextField","getData","insertDataToDB","Yup","axios","require","FormikNewRecipe","recipe","editUser","editMode","setEditMode","diets","setDiets","categories","setcategories","chechboxOption","setCheckboxOption","history","options","fetchDiets","fetchCategories","prop","console","log","obj","key","name","value","id","push","object","string","max","required","image","email","password","min","confirmPassword","oneOf","ref","diet","array","category","values","response","post","alert","formik","handleSubmit","map","i","onSubmit"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport InputCreator from \"./InputCreator\";\r\nimport validate from \"../utills/validateInfo\";\r\nimport useForm from \"../utills/useForm\";\r\nimport ErrorMessages from \"../utills/ErrorMessages\";\r\nimport { FormControl, FormCheck } from 'react-bootstrap'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { TextField } from './TextField';\r\nimport { getData, insertDataToDB } from \"../DAL/api\";\r\nimport * as Yup from 'yup';\r\nconst axios = require('axios')\r\nconst FormikNewRecipe = ({ recipe, editUser }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [diets, setDiets] = useState(null);\r\n    const [categories, setcategories] = useState(null);\r\n\r\n\r\n    const [chechboxOption, setCheckboxOption] = useState([])\r\n    const history = useHistory()\r\n\r\n    useEffect(async () => {\r\n        if (recipe) setEditMode(true);\r\n        const options = []\r\n        const fetchDiets = await getData('diets')\r\n        const fetchCategories = await getData('categories')\r\n        setDiets(fetchDiets);\r\n        setcategories(fetchCategories);\r\n\r\n        for (let prop of fetchDiets) {\r\n            console.log(prop);\r\n\r\n            let obj = { key: prop.name, value: prop.id }\r\n            options.push(obj)\r\n        }\r\n        setCheckboxOption(options)\r\n\r\n    }, []);\r\n    const validate = Yup.object({\r\n        name: Yup.string()\r\n            .max(15, 'Must be 15 characters or less')\r\n            .required('Required'),\r\n        image: Yup.string()\r\n\r\n            .required('Required'),\r\n        email: Yup.string()\r\n            .email('Email is invalid')\r\n            .required('Email is required'),\r\n        password: Yup.string()\r\n            .min(6, 'Password must be at least 6 charaters')\r\n            .required('Password is required'),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref('password'), null], 'Password must match')\r\n            .required('Confirm password is required'),\r\n        diet: Yup.array().required('required')\r\n            .min(2, 'must check 2 types'),\r\n        category: Yup.array().required('required')\r\n            .min(2, 'must check 2 types')\r\n\r\n    })\r\n\r\n    return (<Formik\r\n        initialValues={{\r\n            name: '',\r\n            image: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            diet: [],\r\n            category: []\r\n        }}\r\n        validationSchema={validate}\r\n        onSubmit={async (values) => {\r\n\r\n            const response = await axios.post('http://localhost:3200/users', values)\r\n            console.log(response);\r\n            // insertDataToDB('users', values).then(res => alert(res))\r\n            alert(response);\r\n            // history.push('/login')\r\n            // console.log(res);\r\n            // setMessages(res)\r\n            // if (editMode) {\r\n            //   editUser(values);\r\n            // }\r\n\r\n\r\n        }}>\r\n        {formik => (\r\n            <div className=\"form-inner\">\r\n                <h1 className=\"my-4 font-weight-bold .display-4\">Add Recipe</h1>\r\n                <Form onSubmit={formik.handleSubmit}>\r\n                    <TextField label=\"Name\" name=\"name\" type=\"text\" />\r\n                    <TextField label=\"Image\" name=\"lastName\" type=\"file\" />\r\n                    <TextField label=\"source\" name=\"source\" type=\"text\" />\r\n                    <TextField label=\"source Link\" name=\"sourceUrl\" type=\"text\" />\r\n                    <TextField label=\"description\" name=\"description\" type=\"textarea\" />\r\n                    <div className='d-flex'>\r\n                        <p className='col-sm-3 text-left'>Favorites</p>{diets && diets.map((diet, i) => {\r\n                            return (<label key={i}>\r\n                                <Field type=\"checkbox\" name=\"diet\" value={'' + diet.id} className='mx-2' />\r\n                                {diet.name}\r\n                            </label>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <div className='d-flex'>\r\n                        <p className='col-sm-3 text-left'>categories</p>{categories && categories.map((diet, i) => {\r\n                            return (<label key={i}>\r\n                                <Field type=\"checkbox\" name=\"category\" value={'' + diet.id} className='m-2' />\r\n                                {diet.name}\r\n                            </label>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <div role=\"group\" aria-labelledby=\"my-radio-group\">\r\n                        <label>\r\n                            <Field type=\"radio\" name=\"view Permitions\" value=\"true\" />\r\n                            public\r\n                        </label>\r\n                        <label>\r\n                            <Field type=\"radio\" name=\"view Permitions\" value='false' />\r\n                            private\r\n                        </label>\r\n                    </div>\r\n                    <ErrorMessage name='checkbox' />\r\n                    <button className=\"btn btn-dark mt-3\" type=\"submit\" onClick={formik.onSubmit}>Register</button>\r\n                    <button className=\"btn btn-danger mt-3 ml-3\" type=\"reset\">Reset</button>\r\n                </Form>\r\n            </div>\r\n        )}\r\n    </Formik>\r\n    )\r\n}\r\nexport default FormikNewRecipe\r\n"]},"metadata":{},"sourceType":"module"}