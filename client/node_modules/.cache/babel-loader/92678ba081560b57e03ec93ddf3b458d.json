{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\projects\\\\fullstack-project\\\\src\\\\navbar\\\\search\\\\Search.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import axios from \"axios\";\n\nimport List from \"./List\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetch = require(\"node-fetch\");\n\nexport default function Search() {\n  _s();\n\n  const [contacts, setContacts] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  useEffect(() => {\n    const API_URL = \"https://my.api.mockaroo.com/phonebook.json?key=9ac1c5f0\";\n    fetch(API_URL).then(Response => Response.json).then(res => setContacts(res)); // ft.get(API_URL).then((res) => {\n    //   const contacts = res.data;\n    //   setContacts(contacts);\n    // });\n  }, []);\n  const filteredContacts = search.length === 0 ? contacts : contacts.filter(contact => contact.full_name.toLowerCase().includes(search.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"CONTACTS LIST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search name\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      contacts: filteredContacts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Search, \"2sH4ckJ/0OB9AA8x1qxb7Q80NVI=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/User/Documents/projects/fullstack-project/src/navbar/search/Search.jsx"],"names":["React","useState","useEffect","List","fetch","require","Search","contacts","setContacts","search","setSearch","API_URL","then","Response","json","res","filteredContacts","length","filter","contact","full_name","toLowerCase","includes","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,OAAO,GAAG,yDAAhB;AACAP,IAAAA,KAAK,CAACO,OAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAD/B,EAEGF,IAFH,CAESG,GAAD,IAASP,WAAW,CAACO,GAAD,CAF5B,EAFc,CAKd;AACA;AACA;AACA;AACD,GATQ,EASN,EATM,CAAT;AAWA,QAAMC,gBAAgB,GACpBP,MAAM,CAACQ,MAAP,KAAkB,CAAlB,GACIV,QADJ,GAEIA,QAAQ,CAACW,MAAT,CAAiBC,OAAD,IACdA,OAAO,CAACC,SAAR,CAAkBC,WAAlB,GAAgCC,QAAhC,CAAyCb,MAAM,CAACY,WAAP,EAAzC,CADF,CAHN;AAOA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,aAFd;AAGE,MAAA,KAAK,EAAEZ,MAHT;AAIE,MAAA,QAAQ,EAAGc,CAAD,IAAOb,SAAS,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ5B;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAET;AAAhB;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAlCuBV,M;;KAAAA,M","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\nimport List from \"./List\";\r\nconst fetch = require(\"node-fetch\");\r\nexport default function Search() {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const API_URL = \"https://my.api.mockaroo.com/phonebook.json?key=9ac1c5f0\";\r\n    fetch(API_URL)\r\n      .then((Response) => Response.json)\r\n      .then((res) => setContacts(res));\r\n    // ft.get(API_URL).then((res) => {\r\n    //   const contacts = res.data;\r\n    //   setContacts(contacts);\r\n    // });\r\n  }, []);\r\n\r\n  const filteredContacts =\r\n    search.length === 0\r\n      ? contacts\r\n      : contacts.filter((contact) =>\r\n          contact.full_name.toLowerCase().includes(search.toLowerCase())\r\n        );\r\n\r\n  return (\r\n    <div>\r\n      <h3>CONTACTS LIST</h3>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search name\"\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n      <List contacts={filteredContacts} />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}