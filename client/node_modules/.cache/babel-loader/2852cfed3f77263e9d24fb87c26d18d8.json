{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\projects\\\\fullstack-project\\\\client\\\\src\\\\components\\\\forms\\\\FormikRegister.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from './TextField';\nimport { getData, insertDataToDB, getSpecificUser } from \"../DAL/api\";\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cookies = require('js-cookie');\n\nconst axios = require('axios');\n\nconst FormikRegister = ({\n  id,\n  editUser\n}) => {\n  _s();\n\n  const [editMode, setEditMode] = useState(false);\n  const [diets, setDiets] = useState(null);\n  const [userDetails, setUserdetails] = useState('');\n  const [chechboxOption, setCheckboxOption] = useState([]);\n  const history = useHistory();\n  useEffect(async () => {\n    if (editUser) setEditMode(true);\n    const options = [];\n    const fetchDiets = await getData('diets');\n    setDiets(fetchDiets);\n\n    for (let prop of fetchDiets) {\n      console.log(prop);\n      let obj = {\n        key: prop.name,\n        value: prop.id\n      };\n      options.push(obj);\n    }\n\n    setCheckboxOption(options);\n  }, []);\n  const validate = Yup.object({\n    firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n    lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n    email: Yup.string().email('Email is invalid').required('Email is required'),\n    password: Yup.string().min(6, 'Password must be at least 6 charaters').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must match').required('Confirm password is required'),\n    diet: Yup.array().required('required').min(2, 'must check 2 types')\n  });\n  useEffect(async () => {\n    const id = Cookies.get('user');\n\n    if (editUser) {\n      const response = await getSpecificUser(id);\n      console.log(response);\n      setUserdetails(response);\n    }\n  }, []);\n  console.log(userDetails);\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      firstName: '' || \"get\",\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      checkbox: []\n    },\n    validationSchema: validate,\n    onSubmit: async values => {\n      const response = await axios.post('http://localhost:3200/users', values);\n      console.log(response);\n      alert(response);\n    },\n    children: formik => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"my-4 font-weight-bold .display-4\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"First Name\",\n          name: \"firstName\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"last Name\",\n          name: \"lastName\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Email\",\n          name: \"email\",\n          type: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"password\",\n          name: \"password\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Confirm Password\",\n          name: \"confirmPassword\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"col-sm-3 text-left\",\n            children: \"Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), diets && diets.map((diet, i) => {\n            return /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"checkbox\",\n                name: \"diet\",\n                value: '' + diet.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 33\n              }, this), diet.name]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-dark mt-3\",\n          type: \"submit\",\n          onClick: formik.onSubmit,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger mt-3 ml-3\",\n          type: \"reset\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 13\n  }, this);\n};\n\n_s(FormikRegister, \"9BkUmD/hETY7eEWMfFDd6LjxacI=\", false, function () {\n  return [useHistory];\n});\n\n_c = FormikRegister;\nexport default FormikRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormikRegister\");","map":{"version":3,"sources":["C:/Users/User/Documents/projects/fullstack-project/client/src/components/forms/FormikRegister.jsx"],"names":["React","useEffect","useState","Link","useHistory","Formik","Form","Field","ErrorMessage","TextField","getData","insertDataToDB","getSpecificUser","Yup","Cookies","require","axios","FormikRegister","id","editUser","editMode","setEditMode","diets","setDiets","userDetails","setUserdetails","chechboxOption","setCheckboxOption","history","options","fetchDiets","prop","console","log","obj","key","name","value","push","validate","object","firstName","string","max","required","lastName","email","password","min","confirmPassword","oneOf","ref","diet","array","get","response","checkbox","values","post","alert","formik","handleSubmit","map","i","onSubmit"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\n\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { TextField } from './TextField';\r\nimport { getData, insertDataToDB, getSpecificUser } from \"../DAL/api\";\r\nimport * as Yup from 'yup';\r\nconst Cookies = require('js-cookie')\r\nconst axios = require('axios')\r\nconst FormikRegister = ({ id, editUser }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [diets, setDiets] = useState(null);\r\n    const [userDetails, setUserdetails] = useState('')\r\n    const [chechboxOption, setCheckboxOption] = useState([])\r\n    const history = useHistory()\r\n\r\n    useEffect(async () => {\r\n        if (editUser) setEditMode(true);\r\n        const options = []\r\n        const fetchDiets = await getData('diets')\r\n        setDiets(fetchDiets);\r\n\r\n        for (let prop of fetchDiets) {\r\n            console.log(prop);\r\n\r\n            let obj = { key: prop.name, value: prop.id }\r\n            options.push(obj)\r\n        }\r\n        setCheckboxOption(options)\r\n\r\n    }, []);\r\n    const validate = Yup.object({\r\n        firstName: Yup.string()\r\n            .max(15, 'Must be 15 characters or less')\r\n            .required('Required'),\r\n        lastName: Yup.string()\r\n            .max(20, 'Must be 20 characters or less')\r\n            .required('Required'),\r\n        email: Yup.string()\r\n            .email('Email is invalid')\r\n            .required('Email is required'),\r\n        password: Yup.string()\r\n            .min(6, 'Password must be at least 6 charaters')\r\n            .required('Password is required'),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref('password'), null], 'Password must match')\r\n            .required('Confirm password is required'),\r\n        diet: Yup.array().required('required')\r\n            .min(2, 'must check 2 types')\r\n    })\r\n\r\n    useEffect(async () => {\r\n        const id = Cookies.get('user')\r\n        if (editUser) {\r\n            const response = await getSpecificUser(id);\r\n            console.log(response);\r\n            setUserdetails(response)\r\n        }\r\n    }, [])\r\n    console.log(userDetails);\r\n    return (<Formik\r\n        initialValues={{\r\n            firstName: '' || \"get\",\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            checkbox: []\r\n        }}\r\n        validationSchema={validate}\r\n\r\n        onSubmit={async (values) => {\r\n            const response = await axios.post('http://localhost:3200/users', values)\r\n            console.log(response);\r\n            alert(response);\r\n        }}>\r\n\r\n\r\n        {formik => (\r\n            <div className=\"form-inner\">\r\n                <h1 className=\"my-4 font-weight-bold .display-4\">Sign Up</h1>\r\n                <Form onSubmit={formik.handleSubmit}>\r\n                    <TextField label=\"First Name\" name=\"firstName\" type=\"text\" />\r\n                    <TextField label=\"last Name\" name=\"lastName\" type=\"text\" />\r\n                    <TextField label=\"Email\" name=\"email\" type=\"email\" />\r\n                    <TextField label=\"password\" name=\"password\" type=\"password\" />\r\n                    <TextField label=\"Confirm Password\" name=\"confirmPassword\" type=\"password\" />\r\n                    <div className='d-flex'>\r\n                        <p className='col-sm-3 text-left'>Favorites</p>{diets && diets.map((diet, i) => {\r\n                            return (<label key={i}>\r\n                                <Field type=\"checkbox\" name=\"diet\" value={'' + diet.id} />\r\n                                {diet.name}\r\n                            </label>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <ErrorMessage name='checkbox' />\r\n                    <button className=\"btn btn-dark mt-3\" type=\"submit\" onClick={formik.onSubmit}>Register</button>\r\n                    <button className=\"btn btn-danger mt-3 ml-3\" type=\"reset\">Reset</button>\r\n                </Form>\r\n            </div>\r\n        )}\r\n    </Formik>\r\n    )\r\n}\r\nexport default FormikRegister"]},"metadata":{},"sourceType":"module"}