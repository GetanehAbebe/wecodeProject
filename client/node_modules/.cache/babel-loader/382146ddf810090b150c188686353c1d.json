{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\projects\\\\fullstack-project\\\\client\\\\src\\\\components\\\\forms\\\\FormikRegister.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\"; // import { Form, Col, Button, Row } from \"react-bootstrap\";\n\nimport InputCreator from \"./InputCreator\";\nimport validate from \"../utills/validateInfo\";\nimport useForm from \"../utills/useForm\";\nimport ErrorMessages from \"../utills/ErrorMessages\";\nimport { FormControl, FormCheck } from 'react-bootstrap';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from './TextField';\nimport { getData, insertDataToDB, getSpecificUser } from \"../DAL/api\";\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nconst Cookies = require('js-cookie');\n\nconst FormikRegister = ({\n  id,\n  editUser\n}) => {\n  _s();\n\n  const [editMode, setEditMode] = useState(false);\n  const [diets, setDiets] = useState(null);\n  const [chechboxOption, setCheckboxOption] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    if (editUser) setEditMode(true);\n  }, []);\n  useEffect(async () => {\n    if (editUser) setEditMode(true);\n    console.log(editUser);\n    const options = [];\n    const fetchDiets = await getData('diets');\n    setDiets(fetchDiets);\n\n    for (let prop of fetchDiets) {\n      console.log(prop);\n      let obj = {\n        key: prop.name,\n        value: prop.id\n      };\n      options.push(obj);\n    }\n\n    setCheckboxOption(options);\n\n    if (editMode) {\n      const id = Cookies.get('user');\n      console.log('id', id);\n      const response = await getSpecificUser(id);\n      console.log('response', response, Formik.values); // Formik.values.firstName = response.firstName;\n      // Formik.values.lastName = response.LastName;\n      // Formik.values.email = response.email;\n      // Formik.values.password = response.password;\n    }\n  }, []);\n  const validate = Yup.object({\n    firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n    lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n    email: Yup.string().email('Email is invalid').required('Email is required'),\n    password: Yup.string().min(6, 'Password must be at least 6 charaters').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must match').required('Confirm password is required'),\n    diet: Yup.array().required('required').min(2, 'must check 2 types')\n  });\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      isPrivate: \"\",\n      source: \"\",\n      sourceUrl: \"\",\n      diet: [],\n      category: [],\n      prepTimeMin: '',\n      description: '',\n      image: ''\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().min(3, '').max(15).required('please enter'),\n      isPrivate: Yup.string().min(1),\n      // image: Yup.string().required(\"required\"),\n      diet: Yup.array().min(2, 'choose at least 2 types'),\n      category: Yup.array().min(2, 'choose at least 2 types'),\n      prepTimeMin: Yup.string(),\n      description: Yup.string().min(3).max(30).required('3'),\n      source: Yup.string().min(3, 'min 3 charachters').max(20, 'must be 20 charachters or less').required('required')\n    }),\n    onSubmit: async values => {\n      const data = new FormData();\n      formik.values.guide = guide;\n      formik.values.userId = 95;\n      formik.values.instructions = instructions;\n      if (recipeId) formik.values.id = recipeId;\n      data.append(\"image\", image);\n      data.append(\"user\", Cookies.get('user'));\n      data.append(\"recipe\", JSON.stringify(formik.values));\n\n      if (!recipeId) {\n        const response = await uploadRecipe(data);\n      } else {\n        const update = await updateRecipe(data);\n      }\n\n      submit();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      checkbox: []\n    },\n    validationSchema: validate,\n    onSubmit: async values => {\n      const response = await axios.post('http://localhost:3200/users', values);\n      console.log(response); // insertDataToDB('users', values).then(res => alert(res))\n\n      alert(response); // history.push('/login')\n      // console.log(res);\n      // setMessages(res)\n      // if (editMode) {\n      //   editUser(values);\n      // }\n    },\n    children: formik => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"my-4 font-weight-bold .display-4\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"First Name\",\n          name: \"firstName\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"last Name\",\n          name: \"lastName\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Email\",\n          name: \"email\",\n          type: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"password\",\n          name: \"password\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"text\",\n          name: \"name\",\n          value: formik.values.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Confirm Password\",\n          name: \"confirmPassword\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"col-sm-3 text-left\",\n            children: \"Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), diets && diets.map((diet, i) => {\n            return /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"checkbox\",\n                name: \"diet\",\n                value: '' + diet.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 33\n              }, this), diet.name]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-dark mt-3\",\n          type: \"submit\",\n          onClick: formik.onSubmit,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger mt-3 ml-3\",\n          type: \"reset\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 13\n  }, this);\n};\n\n_s(FormikRegister, \"KD19jZjznwguvunp2KXCVN9w27o=\", true, function () {\n  return [useHistory];\n});\n\n_c = FormikRegister;\nexport default FormikRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormikRegister\");","map":{"version":3,"sources":["C:/Users/User/Documents/projects/fullstack-project/client/src/components/forms/FormikRegister.jsx"],"names":["React","useEffect","useState","Link","useHistory","InputCreator","validate","useForm","ErrorMessages","FormControl","FormCheck","Formik","Form","Field","ErrorMessage","TextField","getData","insertDataToDB","getSpecificUser","Yup","axios","require","Cookies","FormikRegister","id","editUser","editMode","setEditMode","diets","setDiets","chechboxOption","setCheckboxOption","history","console","log","options","fetchDiets","prop","obj","key","name","value","push","get","response","values","object","firstName","string","max","required","lastName","email","password","min","confirmPassword","oneOf","ref","diet","array","formik","useFormik","initialValues","isPrivate","source","sourceUrl","category","prepTimeMin","description","image","validationSchema","onSubmit","data","FormData","guide","userId","instructions","recipeId","append","JSON","stringify","uploadRecipe","update","updateRecipe","submit","checkbox","post","alert","handleSubmit","map","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\n// import { Form, Col, Button, Row } from \"react-bootstrap\";\r\nimport InputCreator from \"./InputCreator\";\r\nimport validate from \"../utills/validateInfo\";\r\nimport useForm from \"../utills/useForm\";\r\nimport ErrorMessages from \"../utills/ErrorMessages\";\r\nimport { FormControl, FormCheck } from 'react-bootstrap'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { TextField } from './TextField';\r\nimport { getData, insertDataToDB, getSpecificUser } from \"../DAL/api\";\r\nimport * as Yup from 'yup';\r\nconst axios = require('axios')\r\nconst Cookies = require('js-cookie')\r\nconst FormikRegister = ({ id, editUser }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [diets, setDiets] = useState(null);\r\n    const [chechboxOption, setCheckboxOption] = useState([])\r\n    const history = useHistory()\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (editUser) setEditMode(true)\r\n    }, [])\r\n    useEffect(async () => {\r\n        if (editUser) setEditMode(true)\r\n        console.log(editUser);\r\n        const options = []\r\n        const fetchDiets = await getData('diets')\r\n        setDiets(fetchDiets);\r\n\r\n        for (let prop of fetchDiets) {\r\n            console.log(prop);\r\n\r\n            let obj = { key: prop.name, value: prop.id }\r\n            options.push(obj)\r\n        }\r\n        setCheckboxOption(options)\r\n        if (editMode) {\r\n\r\n            const id = Cookies.get('user')\r\n            console.log('id', id);\r\n\r\n            const response = await getSpecificUser(id);\r\n            console.log('response', response, Formik.values);\r\n            // Formik.values.firstName = response.firstName;\r\n            // Formik.values.lastName = response.LastName;\r\n            // Formik.values.email = response.email;\r\n            // Formik.values.password = response.password;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }, []);\r\n    const validate = Yup.object({\r\n        firstName: Yup.string()\r\n            .max(15, 'Must be 15 characters or less')\r\n            .required('Required'),\r\n        lastName: Yup.string()\r\n            .max(20, 'Must be 20 characters or less')\r\n            .required('Required'),\r\n        email: Yup.string()\r\n            .email('Email is invalid')\r\n            .required('Email is required'),\r\n        password: Yup.string()\r\n            .min(6, 'Password must be at least 6 charaters')\r\n            .required('Password is required'),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref('password'), null], 'Password must match')\r\n            .required('Confirm password is required'),\r\n        diet: Yup.array().required('required')\r\n            .min(2, 'must check 2 types')\r\n    })\r\n    const formik = useFormik({\r\n        initialValues: {\r\n          name: \"\",\r\n          isPrivate: \"\",\r\n          source: \"\",\r\n          sourceUrl: \"\",\r\n          diet: [],\r\n          category: [],\r\n          prepTimeMin: '',\r\n          description: '',\r\n          image: ''\r\n        },\r\n    \r\n        validationSchema: Yup.object({\r\n          name: Yup.string()\r\n            .min(3, '')\r\n            .max(15)\r\n            .required('please enter'),\r\n          isPrivate: Yup.string().min(1),\r\n          // image: Yup.string().required(\"required\"),\r\n          diet: Yup.array().min(2, 'choose at least 2 types'),\r\n          category: Yup.array().min(2, 'choose at least 2 types'),\r\n          prepTimeMin: Yup.string(),\r\n          description: Yup.string().min(3).max(30).required('3'),\r\n          source: Yup.string().min(3, 'min 3 charachters').max(20, 'must be 20 charachters or less').required('required')\r\n        }),\r\n        onSubmit: async (values) => {\r\n          const data = new FormData();\r\n          formik.values.guide = guide;\r\n          formik.values.userId = 95;\r\n          formik.values.instructions = instructions\r\n          if (recipeId) formik.values.id = recipeId\r\n          data.append(\"image\", image)\r\n          data.append(\"user\", Cookies.get('user'))\r\n          data.append(\"recipe\", JSON.stringify(formik.values))\r\n          if (!recipeId) {\r\n            const response = await uploadRecipe(data)\r\n          } else {\r\n            const update = await updateRecipe(data)\r\n          }\r\n          submit()\r\n        },\r\n    \r\n      })\r\n\r\n    return (<Formik\r\n        initialValues={{\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            checkbox: []\r\n        }}\r\n        validationSchema={validate}\r\n\r\n        onSubmit={async (values) => {\r\n\r\n            const response = await axios.post('http://localhost:3200/users', values)\r\n            console.log(response);\r\n            // insertDataToDB('users', values).then(res => alert(res))\r\n            alert(response);\r\n            // history.push('/login')\r\n            // console.log(res);\r\n            // setMessages(res)\r\n            // if (editMode) {\r\n            //   editUser(values);\r\n            // }\r\n\r\n\r\n        }}>\r\n\r\n\r\n        {formik => (\r\n            <div className=\"form-inner\">\r\n                <h1 className=\"my-4 font-weight-bold .display-4\">Sign Up</h1>\r\n                <Form onSubmit={formik.handleSubmit}>\r\n                    <TextField label=\"First Name\" name=\"firstName\" type=\"text\" />\r\n                    <TextField label=\"last Name\" name=\"lastName\" type=\"text\" />\r\n                    <TextField label=\"Email\" name=\"email\" type=\"email\" />\r\n                    <TextField label=\"password\" name=\"password\" type=\"password\" />\r\n                    <Field type=\"text\" name=\"name\" value={formik.values.name} />\r\n                    <TextField label=\"Confirm Password\" name=\"confirmPassword\" type=\"password\" />\r\n                    <div className='d-flex'>\r\n                        <p className='col-sm-3 text-left'>Favorites</p>{diets && diets.map((diet, i) => {\r\n                            return (<label key={i}>\r\n                                <Field type=\"checkbox\" name=\"diet\" value={'' + diet.id} />\r\n                                {diet.name}\r\n                            </label>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <ErrorMessage name='checkbox' />\r\n                    <button className=\"btn btn-dark mt-3\" type=\"submit\" onClick={formik.onSubmit}>Register</button>\r\n                    <button className=\"btn btn-danger mt-3 ml-3\" type=\"reset\">Reset</button>\r\n                </Form>\r\n            </div>\r\n        )}\r\n    </Formik>\r\n    )\r\n}\r\nexport default FormikRegister"]},"metadata":{},"sourceType":"module"}