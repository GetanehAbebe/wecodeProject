{"ast":null,"code":"/**\n * @author DaveDevor davedevor@gmail.com\n */\n\n/**\n * Cookie Object with set, get, and del methods.\n * @type  {Object}\n */\nvar cookie = {\n  /**\n   * Set a cookie\n   * @param  {Object}  options\n   * @param  {String}  options.name    * name or key of the cookie\n   * @param  {String}  options.value   value of the cookie\n   * @param  {Number}  options.exdays  how many days until the cookie expires\n   * @param  {String}  options.path    path of cookie\n   * @param  {String}  options.domain  domain of cookie\n   */\n  set: function (options) {\n    options.name = options.name || false;\n    options.value = options.value || '';\n    options.exdays = options.exdays || false;\n    options.path = options.path || '/';\n    options.domain = options.domain || false;\n\n    if (options.name) {\n      var domain = options.domain ? 'domain=' + options.domain + ';' : '';\n      var path = 'path=' + options.path;\n      var expires = ''; // create the expiration date\n\n      if (options.exdays) {\n        var d = new Date();\n        d.setTime(d.getTime() + options.exdays * 24 * 60 * 60 * 1000);\n        expires = \"expires=\" + d.toUTCString();\n      }\n\n      document.cookie = options.name + \"=\" + options.value + \";\" + domain + path + ';' + expires;\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * Get a Cookies Value\n   * @param   {String}  cname  name of cookie to retrieve\n   *\n   * @return  {String}         Returns the Value of the Cookie\n   */\n  get: function (cname) {\n    var name = cname + \"=\";\n    var arrCookie = document.cookie.split(';');\n    var strCookie = null;\n    var string = null; // Go through every cookie in the array\n\n    for (var i = 0; i < arrCookie.length; i++) {\n      strCookie = arrCookie[i]; // trim spaces\n\n      while (strCookie.charAt(0) === ' ') {\n        strCookie = strCookie.substring(1);\n      } // if this cookie matches the name we are trying to retreive - found it.\n\n\n      if (strCookie.indexOf(name) === 0) {\n        // get the value\n        string = strCookie.substring(name.length, strCookie.length); // If this is a string of an object, convert it to an object\n\n        if (string.split('&').length > 1) {\n          return _stringToObject(string);\n        } // return the value\n\n\n        return string;\n      }\n    } // never found cookie\n\n\n    return false;\n  },\n\n  /**\n   * Delete a cookie by key\n   * @param   {String}  name   string of cookie name\n   *\n   * @return  {Boolean}        success\n   */\n  del: function (name) {\n    name = name || false;\n    var isDeleted = cookie.set({\n      name: name,\n      value: null,\n      exdays: -1,\n      path: null,\n      domain: null\n    });\n    return isDeleted;\n  }\n};\n\nfunction _stringToObject(string) {\n  var strArray = string.split('&');\n  var stringObj = {};\n  var propValArray = null;\n\n  for (var i = 0; i < strArray.length; i++) {\n    propValArray = strArray[i].split('=');\n\n    if (propValArray.length > 1) {\n      stringObj[propValArray[0]] = propValArray[1];\n    }\n  }\n\n  return stringObj;\n}\n\nmodule.exports = cookie;","map":{"version":3,"sources":["C:/Users/User/Documents/projects/fullstack-project/client/node_modules/jscookie/cookie.js"],"names":["cookie","set","options","name","value","exdays","path","domain","expires","d","Date","setTime","getTime","toUTCString","document","get","cname","arrCookie","split","strCookie","string","i","length","charAt","substring","indexOf","_stringToObject","del","isDeleted","strArray","stringObj","propValArray","module","exports"],"mappings":"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","sourcesContent":["/**\n * @author DaveDevor davedevor@gmail.com\n */\n\n/**\n * Cookie Object with set, get, and del methods.\n * @type  {Object}\n */\nvar cookie = {\n\n\t/**\n\t * Set a cookie\n\t * @param  {Object}  options\n\t * @param  {String}  options.name    * name or key of the cookie\n\t * @param  {String}  options.value   value of the cookie\n\t * @param  {Number}  options.exdays  how many days until the cookie expires\n\t * @param  {String}  options.path    path of cookie\n\t * @param  {String}  options.domain  domain of cookie\n\t */\n\tset: function(options) {\n\t\toptions.name   = options.name   || false;\n\t\toptions.value  = options.value  || '';\n\t\toptions.exdays = options.exdays || false;\n\t\toptions.path   = options.path   || '/';\n\t\toptions.domain = options.domain || false;\n\n\t\tif (options.name) {\n\t\t\tvar domain  = options.domain ? 'domain=' + options.domain + ';' : '';\n\t\t\tvar path    = 'path=' + options.path;\n\t\t\tvar expires = '';\n\n\t\t\t// create the expiration date\n\t\t\tif (options.exdays) {\n\t\t\t\tvar d = new Date();\n\n\t\t\t\td.setTime( d.getTime() + (options.exdays * 24 * 60 * 60 * 1000));\n\t\t\t\texpires = \"expires=\" + d.toUTCString();\n\t\t\t}\n\n\t\t\tdocument.cookie = options.name + \"=\" + options.value + \";\" + domain + path + ';' + expires;\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t},\n\n\t/**\n\t * Get a Cookies Value\n\t * @param   {String}  cname  name of cookie to retrieve\n\t *\n\t * @return  {String}         Returns the Value of the Cookie\n\t */\n\tget: function(cname) {\n\t\tvar name        = cname + \"=\";\n\t\tvar arrCookie   = document.cookie.split(';');\n\t\tvar strCookie     = null;\n\t\tvar string        = null;\n\n\t\t// Go through every cookie in the array\n\t\tfor(var i = 0; i < arrCookie.length; i++) {\n\t\t\tstrCookie = arrCookie[i];\n\n\t\t\t// trim spaces\n\t\t\twhile (strCookie.charAt(0) === ' ') {\n\t\t\t\tstrCookie = strCookie.substring(1);\n\t\t\t}\n\n\t\t\t// if this cookie matches the name we are trying to retreive - found it.\n\t\t\tif (strCookie.indexOf(name) === 0) {\n\t\t\t\t// get the value\n\t\t\t\tstring = strCookie.substring(name.length, strCookie.length);\n\n\t\t\t\t// If this is a string of an object, convert it to an object\n\t\t\t\tif (string.split('&').length > 1) {\n\t\t\t\t\treturn _stringToObject(string);\n\n\t\t\t\t}\n\n\t\t\t\t// return the value\n\t\t\t\treturn string;\n\t\t\t}\n\t\t}\n\n\t\t// never found cookie\n\t\treturn false;\n\t},\n\n\t/**\n\t * Delete a cookie by key\n\t * @param   {String}  name   string of cookie name\n\t *\n\t * @return  {Boolean}        success\n\t */\n\tdel: function (name) {\n\t\tname = name || false;\n\t\tvar isDeleted = cookie.set({\n\t\t\tname   : name,\n\t\t\tvalue  : null,\n\t\t\texdays : -1,\n\t\t\tpath   : null,\n\t\t\tdomain : null\n\t\t});\n\n\t\treturn isDeleted;\n\t}\n};\n\n\nfunction _stringToObject(string) {\n\tvar strArray   = string.split('&');\n\tvar stringObj  = {};\n\tvar propValArray = null;\n\n\tfor (var i = 0; i < strArray.length; i++) {\n\t\tpropValArray = strArray[i].split('=');\n\n\t\tif (propValArray.length > 1) {\n\t\t\tstringObj[propValArray[0]] = propValArray[1];\n\t\t}\n\t}\n\n\treturn stringObj;\n}\n\n\nmodule.exports = cookie;\n"]},"metadata":{},"sourceType":"script"}