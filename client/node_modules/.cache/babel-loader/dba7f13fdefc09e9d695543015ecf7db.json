{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useForm = (callback, validate) => {\n  _s();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  values.diet = [];\n  values.categ0ry = [];\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    if (e.target.name == 'diet') {\n      if (values.diet.includes(value)) {\n        const newDiet = values.diet.filter(item => item !== value);\n        console.log(newDiet);\n        values.diet = newDiet;\n        values.diet = newDiet;\n        const newValue = [...value, newDiet];\n        setValues(newValue);\n      } else {\n        values.diet.push(value); //setValues(...values, )\n      }\n    } else if (e.target.type == \"checkbox\" && values[name]) {\n      delete values[name];\n      setValues({ ...values\n      });\n    } else {\n      setValues({ ...values,\n        [name]: value\n      });\n    }\n  };\n\n  console.log(values);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    for (const key in errors) {\n      if (!!errors[key].length) return;\n    }\n\n    isSubmitting && callback();\n  }, [errors]);\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\n_s(useForm, \"fN8x5Yp0b2dZEBXkEth9Ky/Ylmk=\");\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/User/Documents/projects/fullstack-project/client/src/components/utills/useForm.js"],"names":["useState","useEffect","useForm","callback","validate","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","diet","categ0ry","handleChange","e","name","value","target","includes","newDiet","filter","item","console","log","newValue","push","type","handleSubmit","preventDefault","key","length"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AACA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAAA;;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AACAK,EAAAA,MAAM,CAACM,IAAP,GAAc,EAAd;AACAN,EAAAA,MAAM,CAACO,QAAP,GAAkB,EAAlB;;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;;AACA,QAAIH,CAAC,CAACG,MAAF,CAASF,IAAT,IAAiB,MAArB,EAA6B;AAC3B,UAAIV,MAAM,CAACM,IAAP,CAAYO,QAAZ,CAAqBF,KAArB,CAAJ,EAAiC;AAC/B,cAAMG,OAAO,GAAGd,MAAM,CAACM,IAAP,CAAYS,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,KAAKL,KAApC,CAAhB;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAd,QAAAA,MAAM,CAACM,IAAP,GAAcQ,OAAd;AACAd,QAAAA,MAAM,CAACM,IAAP,GAAcQ,OAAd;AACA,cAAMK,QAAQ,GAAG,CAAC,GAAGR,KAAJ,EAAWG,OAAX,CAAjB;AACAb,QAAAA,SAAS,CAACkB,QAAD,CAAT;AAED,OARD,MAQO;AACLnB,QAAAA,MAAM,CAACM,IAAP,CAAYc,IAAZ,CAAiBT,KAAjB,EADK,CAGL;AACD;AACF,KAdD,MAcO,IAAIF,CAAC,CAACG,MAAF,CAASS,IAAT,IAAiB,UAAjB,IAA+BrB,MAAM,CAACU,IAAD,CAAzC,EAAiD;AACtD,aAAOV,MAAM,CAACU,IAAD,CAAb;AACAT,MAAAA,SAAS,CAAC,EAAE,GAAGD;AAAL,OAAD,CAAT;AACD,KAHM,MAGA;AACLC,MAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,SAACU,IAAD,GAAQC;AAArB,OAAD,CAAT;AACD;AACF,GAtBD;;AAuBAM,EAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAZ;;AAEA,QAAMsB,YAAY,GAAIb,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACc,cAAF;AACApB,IAAAA,SAAS,CAACJ,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAK,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAJD;;AAMAT,EAAAA,SAAS,CAAC,MAAM;AACd,SAAK,MAAM4B,GAAX,IAAkBtB,MAAlB,EAA0B;AACxB,UAAI,CAAC,CAACA,MAAM,CAACsB,GAAD,CAAN,CAAYC,MAAlB,EAA0B;AAC3B;;AACDrB,IAAAA,YAAY,IAAIN,QAAQ,EAAxB;AACD,GALQ,EAKN,CAACI,MAAD,CALM,CAAT;AAMA,SAAO;AAAEM,IAAAA,YAAF;AAAgBc,IAAAA,YAAhB;AAA8BtB,IAAAA,MAA9B;AAAsCE,IAAAA;AAAtC,GAAP;AACD,CA7CD;;GAAML,O;;AA+CN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nconst useForm = (callback, validate) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  values.diet = []\r\n  values.categ0ry = []\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (e.target.name == 'diet') {\r\n      if (values.diet.includes(value)) {\r\n        const newDiet = values.diet.filter(item => item !== value);\r\n        console.log(newDiet);\r\n        values.diet = newDiet\r\n        values.diet = newDiet;\r\n        const newValue = [...value, newDiet]\r\n        setValues(newValue)\r\n\r\n      } else {\r\n        values.diet.push(value)\r\n\r\n        //setValues(...values, )\r\n      }\r\n    } else if (e.target.type == \"checkbox\" && values[name]) {\r\n      delete values[name];\r\n      setValues({ ...values });\r\n    } else {\r\n      setValues({ ...values, [name]: value });\r\n    }\r\n  };\r\n  console.log(values);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setErrors(validate(values));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    for (const key in errors) {\r\n      if (!!errors[key].length) return;\r\n    }\r\n    isSubmitting && callback();\r\n  }, [errors]);\r\n  return { handleChange, handleSubmit, values, errors };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}