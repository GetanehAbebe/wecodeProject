{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\projects\\\\fullstack-project\\\\client\\\\src\\\\components\\\\forms\\\\RegisterForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./registerform.css\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Form, Col, Button, Row } from \"react-bootstrap\";\nimport InputCreator from \"./InputCreator\";\nimport { getData, insertDataToDB, appendUser, getSpecificUser } from \"../DAL/api\";\nimport * as Yup from 'yup';\nimport { useFormik } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cookies = require('js-cookie');\n\nconst RegisterForm = ({\n  recipe,\n  editUser\n}) => {\n  _s();\n\n  const [editMode, setEditMode] = useState(false);\n  const [diets, setDiets] = useState([]);\n  const [meesages, setMessages] = useState('');\n  const history = useHistory();\n\n  const insertToForm = user => {\n    console.log('user', user);\n    const email = user.email;\n    console.log(email);\n    formik.values.firstName = user.firstName;\n    formik.values.lastName = user.lastName;\n    formik.values.email = user.email;\n    formik.values.password = user.password;\n    formik.values.confirmPassword = user.password;\n    const arr = [];\n    user.favorites.map(item => {\n      arr.push(item.DietId);\n    });\n    formik.values.diet = arr;\n  };\n\n  useEffect(async () => {\n    if (editUser) {\n      const id = Cookies.get(\"user\");\n      setEditMode(true);\n      const getUser = await getSpecificUser(id);\n      insertToForm(getUser);\n    }\n\n    const fetchDiets = await getData('diets');\n    setDiets(fetchDiets.map(item => {\n      return {\n        id: item.id,\n        name: item.name,\n        select: formik.values.diet.includes(item.id)\n      };\n    }));\n  }, []);\n  const formik = useFormik({\n    initialValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      diet: [],\n      confirmPassword: ''\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n      lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n      email: Yup.string().email('Email is invalid').required('Email is required'),\n      password: Yup.string().min(6, 'Password must be at least 6 charaters').required('Password is required'),\n      confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must match').required('Confirm password is required'),\n      diet: Yup.array().required('required').min(2, 'must check 2 types')\n    }),\n    onSubmit: async values => {\n      const res = await insertDataToDB('users', formik.values);\n      alert(JSON.stringify(values));\n      const data = new FormData();\n\n      if (!editUser) {\n        const response = await appendUser(values);\n      } else {// const update = await updateUser(data)\n      }\n    }\n  });\n  console.log(formik.values);\n  console.log(diets);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      dir: \"rtl\",\n      onSubmit: formik.handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-inner\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n          className: \"m-auto rtl\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center\",\n            children: \"Registration page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(InputCreator, {\n            title: \"First name\",\n            type: \"text\",\n            required: \"true\",\n            value: formik.values.firstName,\n            placeholder: \"First Name\",\n            sign: /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"fas fa-user\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 21\n            }, this),\n            onChange: formik.handleChange,\n            name: \"firstName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), formik.touched.firstName && formik.errors.firstName ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-danger\",\n            children: [formik.errors.firstName, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 68\n          }, this) : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(InputCreator, {\n            title: \"Last name\",\n            type: \"text\",\n            required: \"true\",\n            value: formik.values.lastName,\n            placeholder: \"last Name\",\n            sign: /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"fas fa-user\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 21\n            }, this),\n            onChange: formik.handleChange,\n            name: \"lastName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), formik.touched.lastName && formik.errors.lastName ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-danger\",\n            children: [formik.errors.lastName, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 66\n          }, this) : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formGridPassword\",\n          children: [/*#__PURE__*/_jsxDEV(InputCreator, {\n            title: \"Email\",\n            type: \"email\",\n            value: formik.values.email,\n            required: \"true\",\n            onChange: formik.handleChange,\n            placeholder: \"Email\",\n            sign: /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"fas fa-mail-bulk\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 21\n            }, this),\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), formik.touched.email && formik.errors.email ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-danger\",\n            children: [formik.errors.email, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 60\n          }, this) : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(InputCreator, {\n            title: \"Password\",\n            type: \"password\",\n            required: \"true\",\n            value: formik.values.password,\n            placeholder: \"password\",\n            sign: /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"fas fa-mail-bulk\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 21\n            }, this),\n            onChange: formik.handleChange,\n            name: \"password\",\n            note: \"Minimum password requirements: at least a digit, \\r lowercase and uppercase letter in English. And no less than 8 characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), formik.touched.password && formik.errors.password ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-danger\",\n            children: [formik.errors.password, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 66\n          }, this) : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(InputCreator, {\n            title: \"Confirm password\",\n            type: \"password\",\n            required: \"true\",\n            value: formik.values.confirmPassword,\n            placeholder: \"\",\n            sign: /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"fas fa-mail-bulk\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 21\n            }, this),\n            onChange: formik.handleChange,\n            name: \"confirmPassword\",\n            note: \"The content of the field will be the same as the content typed for the password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), formik.touched.confirmPassword && formik.errors.confirmPassword ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-danger\",\n            children: [formik.errors.confirmPassword, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 80\n          }, this) : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-label text-left d-block\",\n                children: \"Favorite diet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              className: \"d-flex flex-row flex-wrap col-sm-10\",\n              children: [diets.length && diets.map(diet => {\n                return /*#__PURE__*/_jsxDEV(Form.Check, {\n                  type: \"checkbox\",\n                  label: diet.name,\n                  name: 'diet',\n                  value: diet.id,\n                  checked: diet.select,\n                  onChange: e => {\n                    let checked = e.target.checked;\n                    setDiets(diets.map(item => {\n                      diet.select = checked;\n                      formik.values.diet();\n                      return item;\n                    })); // formik.handleChange();\n                  } // {...formik.getFieldProps(\"diet\")}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 23\n                }, this);\n              }), formik.touched.diet && formik.errors.diet ? /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: [formik.errors.diet, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 62\n              }, this) : \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          id: \"submit\",\n          children: editMode ? \"update\" : \"sign-up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          children: \"have an acount?login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(RegisterForm, \"UaJ5sqoQF14UYh4XfH+KvfagKqs=\", false, function () {\n  return [useHistory, useFormik];\n});\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["C:/Users/User/Documents/projects/fullstack-project/client/src/components/forms/RegisterForm.jsx"],"names":["React","useEffect","useState","Link","useHistory","Form","Col","Button","Row","InputCreator","getData","insertDataToDB","appendUser","getSpecificUser","Yup","useFormik","Cookies","require","RegisterForm","recipe","editUser","editMode","setEditMode","diets","setDiets","meesages","setMessages","history","insertToForm","user","console","log","email","formik","values","firstName","lastName","password","confirmPassword","arr","favorites","map","item","push","DietId","diet","id","get","getUser","fetchDiets","name","select","includes","initialValues","validationSchema","object","string","max","required","min","oneOf","ref","array","onSubmit","res","alert","JSON","stringify","data","FormData","response","handleSubmit","handleChange","touched","errors","length","e","checked","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./registerform.css\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Form, Col, Button, Row } from \"react-bootstrap\";\r\nimport InputCreator from \"./InputCreator\";\r\n\r\nimport { getData, insertDataToDB, appendUser, getSpecificUser } from \"../DAL/api\";\r\nimport * as Yup from 'yup'\r\nimport { useFormik } from \"formik\";\r\nconst Cookies = require('js-cookie')\r\nconst RegisterForm = ({ recipe, editUser }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [diets, setDiets] = useState([]);\r\n  const [meesages, setMessages] = useState('')\r\n  const history = useHistory()\r\n\r\n\r\n\r\n\r\n  const insertToForm = (user) => {\r\n    console.log('user', user);\r\n    const email = user.email;\r\n    console.log(email);\r\n    formik.values.firstName = user.firstName;\r\n    formik.values.lastName = user.lastName;\r\n    formik.values.email = user.email;\r\n    formik.values.password = user.password;\r\n    formik.values.confirmPassword = user.password;\r\n    const arr = []\r\n    user.favorites.map(item => {\r\n      arr.push(item.DietId)\r\n    })\r\n    formik.values.diet = arr;\r\n\r\n  }\r\n\r\n  useEffect(async () => {\r\n    if (editUser) {\r\n      const id = Cookies.get(\"user\")\r\n      setEditMode(true);\r\n      const getUser = await getSpecificUser(id)\r\n\r\n      insertToForm(getUser)\r\n\r\n    }\r\n\r\n    const fetchDiets = await getData('diets')\r\n    setDiets(fetchDiets.map(item => {\r\n      return {\r\n        id: item.id,\r\n        name: item.name,\r\n        select: formik.values.diet.includes(item.id)\r\n      }\r\n    }));\r\n  }, []);\r\n\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      diet: [],\r\n      confirmPassword: '',\r\n\r\n    },\r\n\r\n    validationSchema: Yup.object({\r\n      firstName: Yup.string()\r\n        .max(15, 'Must be 15 characters or less')\r\n        .required('Required'),\r\n      lastName: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Email is invalid')\r\n        .required('Email is required'),\r\n      password: Yup.string()\r\n        .min(6, 'Password must be at least 6 charaters')\r\n        .required('Password is required'),\r\n      confirmPassword: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Password must match')\r\n        .required('Confirm password is required'),\r\n      diet: Yup.array().required('required')\r\n        .min(2, 'must check 2 types')\r\n    })\r\n    ,\r\n\r\n    onSubmit: async (values) => {\r\n      const res = await insertDataToDB('users', formik.values);\r\n      alert(JSON.stringify(values))\r\n      const data = new FormData();\r\n      if (!editUser) {\r\n        const response = await appendUser(values)\r\n      } else {\r\n\r\n        // const update = await updateUser(data)\r\n      }\r\n\r\n    },\r\n\r\n  })\r\n  console.log(formik.values);\r\n  console.log(diets);\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Form dir=\"rtl\" onSubmit={formik.handleSubmit}>\r\n        <div className=\"form-inner\">\r\n          <Form.Row className=\"m-auto rtl\">\r\n            <h1 className=\"text-center\">Registration page</h1>\r\n          </Form.Row>\r\n          <hr />\r\n          <Form.Group>\r\n            <InputCreator\r\n              title=\"First name\"\r\n              type=\"text\"\r\n              required=\"true\"\r\n              value={formik.values.firstName}\r\n              placeholder=\"First Name\"\r\n              sign={<i class=\"fas fa-user\"></i>}\r\n              onChange={formik.handleChange}\r\n              name=\"firstName\"\r\n            />\r\n            {formik.touched.firstName && formik.errors.firstName ? <p className='text-danger'>{formik.errors.firstName} </p> : \"\"}\r\n\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <InputCreator\r\n              title=\"Last name\"\r\n              type=\"text\"\r\n              required=\"true\"\r\n              value={formik.values.lastName}\r\n              placeholder=\"last Name\"\r\n              sign={<i class=\"fas fa-user\"></i>}\r\n              onChange={formik.handleChange}\r\n              name=\"lastName\"\r\n            />\r\n            {formik.touched.lastName && formik.errors.lastName ? <p className='text-danger'>{formik.errors.lastName} </p> : \"\"}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"formGridPassword\">\r\n            <InputCreator\r\n              title=\"Email\"\r\n              type=\"email\"\r\n              value={formik.values.email}\r\n              required=\"true\"\r\n              onChange={formik.handleChange}\r\n              placeholder=\"Email\"\r\n              sign={<i class=\"fas fa-mail-bulk\"></i>}\r\n              name=\"email\"\r\n            />\r\n            {formik.touched.email && formik.errors.email ? <p className='text-danger'>{formik.errors.email} </p> : \"\"}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <InputCreator\r\n              title=\"Password\"\r\n              type=\"password\"\r\n              required=\"true\"\r\n              value={formik.values.password}\r\n              placeholder=\"password\"\r\n              sign={<i class=\"fas fa-mail-bulk\"></i>}\r\n              onChange={formik.handleChange}\r\n              name=\"password\"\r\n              note=\"Minimum password requirements: at least a digit, \r\n              lowercase and uppercase letter in English. And no less than 8 characters\"\r\n            />\r\n            {formik.touched.password && formik.errors.password ? <p className='text-danger'>{formik.errors.password} </p> : \"\"}\r\n\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <InputCreator\r\n              title=\"Confirm password\"\r\n              type=\"password\"\r\n              required=\"true\"\r\n              value={formik.values.confirmPassword}\r\n              placeholder=\"\"\r\n              sign={<i class=\"fas fa-mail-bulk\"></i>}\r\n              onChange={formik.handleChange}\r\n              name=\"confirmPassword\"\r\n\r\n              note=\"The content of the field will be the same as the content typed for the password\"\r\n            />\r\n            {formik.touched.confirmPassword && formik.errors.confirmPassword ? <p className='text-danger'>{formik.errors.confirmPassword} </p> : \"\"}\r\n\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Row>\r\n              <Col>\r\n                <label className='form-label text-left d-block'>Favorite diet</label>\r\n              </Col>\r\n              <Col className=\"d-flex flex-row flex-wrap col-sm-10\">\r\n                {diets.length &&\r\n                  diets.map((diet) => {\r\n                    return (\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        label={diet.name}\r\n                        name={'diet'}\r\n                        value={diet.id}\r\n                        checked={diet.select}\r\n                        onChange={(e) => {\r\n                          let checked = e.target.checked;\r\n                          setDiets(diets.map(item => {\r\n                            diet.select = checked;\r\n                            formik.values.diet()\r\n                            return item\r\n                          }))\r\n                         \r\n                          // formik.handleChange();\r\n                        }}\r\n                        // {...formik.getFieldProps(\"diet\")}\r\n                      />\r\n                    );\r\n                  })}\r\n                {formik.touched.diet && formik.errors.diet ? <p className='text-danger'>{formik.errors.diet} </p> : \"\"}\r\n\r\n              </Col>\r\n            </Row>\r\n          </Form.Group>\r\n          {\r\n            <Button type=\"submit\" id=\"submit\" >\r\n              {editMode ? \"update\" : \"sign-up\"}\r\n            </Button>\r\n          }\r\n          <Link to=\"/login\">have an acount?login</Link>\r\n        </div>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n"]},"metadata":{},"sourceType":"module"}