{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\projects\\\\fullstack-project\\\\client\\\\src\\\\components\\\\forms\\\\formikRegister.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./registerform.css\";\nimport { Link, useHistory } from \"react-router-dom\"; // import { Form, Col, Button, Row } from \"react-bootstrap\";\n\nimport InputCreator from \"./InputCreator\";\nimport validate from \"../utills/validateInfo\";\nimport useForm from \"../utills/useForm\";\nimport ErrorMessages from \"../utills/ErrorMessages\";\nimport { Formik, Form } from 'formik';\nimport { TextField } from './TextField';\nimport * as Yup from 'yup';\nimport { getData, insertDataToDB } from \"../DAL/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormikRegister = ({\n  recipe,\n  editUser\n}) => {\n  _s();\n\n  const [editMode, setEditMode] = useState(false);\n  const [diets, setDiets] = useState([]);\n  const history = useHistory();\n  useEffect(async () => {\n    if (recipe) setEditMode(true);\n    const fetchDiets = await getData('diets');\n    console.log(fetchDiets);\n    setDiets(fetchDiets);\n  }, []);\n\n  function objectIsEmpty(obj) {\n    for (var prop in obj) {\n      console.log(obj[prop]);\n      if (!!obj[prop]) return false;\n    }\n\n    return true;\n  }\n\n  function submit(e) {\n    // console.log(objectIsEmpty(errors));\n    // if (!objectIsEmpty(errors)) {\n    // insertDataToDB('users', values);\n    // history.push('/login')\n    if (editMode) {// editUser(values);\n    }\n  }\n\n  const validate = Yup.object({\n    firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n    lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n    email: Yup.string().email('Email is invalid').required('Email is required'),\n    password: Yup.string().min(6, 'Password must be at least 6 charaters').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must match').required('Confirm password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPassword: ''\n    },\n    validationSchema: validate,\n    onSubmit: values => {\n      console.log(values);\n    },\n    children: formik => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"my-4 font-weight-bold .display-4\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        className: \"form-inner\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"First Name\",\n          name: \"firstName\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"last Name\",\n          name: \"lastName\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Email\",\n          name: \"email\",\n          type: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"password\",\n          name: \"password\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Confirm Password\",\n          name: \"confirmPassword\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-dark mt-3\",\n          type: \"submit\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger mt-3 ml-3\",\n          type: \"reset\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 13\n  }, this);\n};\n\n_s(FormikRegister, \"ro/XCZsE72mYcFlvi7b/uSiLgWc=\", false, function () {\n  return [useHistory];\n});\n\n_c = FormikRegister;\nexport default FormikRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormikRegister\");","map":{"version":3,"sources":["C:/Users/User/Documents/projects/fullstack-project/client/src/components/forms/formikRegister.js"],"names":["React","useEffect","useState","Link","useHistory","InputCreator","validate","useForm","ErrorMessages","Formik","Form","TextField","Yup","getData","insertDataToDB","FormikRegister","recipe","editUser","editMode","setEditMode","diets","setDiets","history","fetchDiets","console","log","objectIsEmpty","obj","prop","submit","e","object","firstName","string","max","required","lastName","email","password","min","confirmPassword","oneOf","ref","values","formik"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./registerform.css\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n// import { Form, Col, Button, Row } from \"react-bootstrap\";\r\nimport InputCreator from \"./InputCreator\";\r\nimport validate from \"../utills/validateInfo\";\r\nimport useForm from \"../utills/useForm\";\r\nimport ErrorMessages from \"../utills/ErrorMessages\";\r\nimport { Formik, Form } from 'formik';\r\nimport { TextField } from './TextField';\r\nimport * as Yup from 'yup';\r\n\r\nimport { getData, insertDataToDB } from \"../DAL/api\";\r\nconst FormikRegister = ({ recipe, editUser }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [diets, setDiets] = useState([]);\r\n    const history = useHistory()\r\n    useEffect(async () => {\r\n        if (recipe) setEditMode(true);\r\n        const fetchDiets = await getData('diets')\r\n        console.log(fetchDiets);\r\n        setDiets(fetchDiets);\r\n    }, []);\r\n\r\n\r\n\r\n    function objectIsEmpty(obj) {\r\n        for (var prop in obj) {\r\n            console.log(obj[prop]);\r\n            if (!!obj[prop])\r\n\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function submit(e) {\r\n        // console.log(objectIsEmpty(errors));\r\n        // if (!objectIsEmpty(errors)) {\r\n        // insertDataToDB('users', values);\r\n        // history.push('/login')\r\n\r\n        if (editMode) {\r\n            // editUser(values);\r\n        }\r\n    }\r\n\r\n    const validate = Yup.object({\r\n        firstName: Yup.string()\r\n            .max(15, 'Must be 15 characters or less')\r\n            .required('Required'),\r\n        lastName: Yup.string()\r\n            .max(20, 'Must be 20 characters or less')\r\n            .required('Required'),\r\n        email: Yup.string()\r\n            .email('Email is invalid')\r\n            .required('Email is required'),\r\n        password: Yup.string()\r\n            .min(6, 'Password must be at least 6 charaters')\r\n            .required('Password is required'),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref('password'), null], 'Password must match')\r\n            .required('Confirm password is required'),\r\n    })\r\n    return (<Formik\r\n        initialValues={{\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        }}\r\n        validationSchema={validate}\r\n        onSubmit={values => {\r\n            console.log(values)\r\n        }}\r\n    >\r\n        {formik => (\r\n\r\n            <div className=\"form-inner\">\r\n                <h1 className=\"my-4 font-weight-bold .display-4\">Sign Up</h1>\r\n                <Form className='form-inner'>\r\n                    <TextField label=\"First Name\" name=\"firstName\" type=\"text\" />\r\n                    <TextField label=\"last Name\" name=\"lastName\" type=\"text\" />\r\n                    <TextField label=\"Email\" name=\"email\" type=\"email\" />\r\n                    <TextField label=\"password\" name=\"password\" type=\"password\" />\r\n                    <TextField label=\"Confirm Password\" name=\"confirmPassword\" type=\"password\" />\r\n                    <button className=\"btn btn-dark mt-3\" type=\"submit\">Register</button>\r\n                    <button className=\"btn btn-danger mt-3 ml-3\" type=\"reset\">Reset</button>\r\n                </Form>\r\n            </div>\r\n        )}\r\n    </Formik>\r\n    )\r\n}\r\nexport default FormikRegister"]},"metadata":{},"sourceType":"module"}