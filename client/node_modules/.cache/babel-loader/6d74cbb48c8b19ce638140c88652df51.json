{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useForm = (callback, validate) => {\n  _s();\n\n  const [values, setValues] = useState({\n    diet: [],\n    category: []\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false); // values.diet = []\n  // values.categ0ry = []\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    if (e.target.name == 'diet') {\n      if (values.diet.includes(value)) {\n        const newDiet = values.diet.filter(item => item !== value);\n        console.log(newDiet);\n        const diet = newDiet;\n        values.diet = diet;\n        console.log('valuesss', values);\n        const newVal = values;\n        setValues(newVal);\n      } else {\n        set;\n        values.diet.push(value); //setValues(...values, )\n      }\n    } else if (e.target.type == \"checkbox\" && values[name]) {\n      delete values[name];\n      setValues({ ...values\n      });\n    } else {\n      setValues({ ...values,\n        [name]: value\n      });\n    }\n  };\n\n  console.log('redular->', values);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    for (const key in errors) {\n      if (!!errors[key].length) return;\n    }\n\n    isSubmitting && callback();\n  }, [errors]);\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\n_s(useForm, \"4kuzPtfRQFIILRKfcB+/kqPyykU=\");\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/User/Documents/projects/fullstack-project/client/src/components/utills/useForm.js"],"names":["useState","useEffect","useForm","callback","validate","values","setValues","diet","category","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","e","name","value","target","includes","newDiet","filter","item","console","log","newVal","set","push","type","handleSubmit","preventDefault","key","length"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AACA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAAA;;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AAACO,IAAAA,IAAI,EAAC,EAAN;AAASC,IAAAA,QAAQ,EAAC;AAAlB,GAAD,CAApC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,KAAD,CAAhD,CAHsC,CAItC;AACA;;AAEA,QAAMa,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;;AACA,QAAIH,CAAC,CAACG,MAAF,CAASF,IAAT,IAAiB,MAArB,EAA6B;AAC3B,UAAIV,MAAM,CAACE,IAAP,CAAYW,QAAZ,CAAqBF,KAArB,CAAJ,EAAiC;AAC/B,cAAMG,OAAO,GAAGd,MAAM,CAACE,IAAP,CAAYa,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,KAAKL,KAApC,CAAhB;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,cAAMZ,IAAI,GAAGY,OAAb;AACAd,QAAAA,MAAM,CAACE,IAAP,GAAcA,IAAd;AACAe,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBlB,MAAxB;AACA,cAAMmB,MAAM,GAAGnB,MAAf;AACAC,QAAAA,SAAS,CAACkB,MAAD,CAAT;AAID,OAXD,MAWO;AACLC,QAAAA,GAAG;AACHpB,QAAAA,MAAM,CAACE,IAAP,CAAYmB,IAAZ,CAAiBV,KAAjB,EAFK,CAIL;AACD;AACF,KAlBD,MAkBO,IAAIF,CAAC,CAACG,MAAF,CAASU,IAAT,IAAiB,UAAjB,IAA+BtB,MAAM,CAACU,IAAD,CAAzC,EAAiD;AACtD,aAAOV,MAAM,CAACU,IAAD,CAAb;AACAT,MAAAA,SAAS,CAAC,EAAE,GAAGD;AAAL,OAAD,CAAT;AACD,KAHM,MAGA;AACLC,MAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,SAACU,IAAD,GAAQC;AAArB,OAAD,CAAT;AACD;AACF,GA1BD;;AA2BAM,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBlB,MAAzB;;AAEA,QAAMuB,YAAY,GAAId,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACe,cAAF;AACAnB,IAAAA,SAAS,CAACN,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAO,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAJD;;AAMAX,EAAAA,SAAS,CAAC,MAAM;AACd,SAAK,MAAM6B,GAAX,IAAkBrB,MAAlB,EAA0B;AACxB,UAAI,CAAC,CAACA,MAAM,CAACqB,GAAD,CAAN,CAAYC,MAAlB,EAA0B;AAC3B;;AACDpB,IAAAA,YAAY,IAAIR,QAAQ,EAAxB;AACD,GALQ,EAKN,CAACM,MAAD,CALM,CAAT;AAMA,SAAO;AAAEI,IAAAA,YAAF;AAAgBe,IAAAA,YAAhB;AAA8BvB,IAAAA,MAA9B;AAAsCI,IAAAA;AAAtC,GAAP;AACD,CAjDD;;GAAMP,O;;AAmDN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nconst useForm = (callback, validate) => {\r\n  const [values, setValues] = useState({diet:[],category:[]});\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  // values.diet = []\r\n  // values.categ0ry = []\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (e.target.name == 'diet') {\r\n      if (values.diet.includes(value)) {\r\n        const newDiet = values.diet.filter(item => item !== value);\r\n        console.log(newDiet);\r\n        const diet = newDiet;\r\n        values.diet = diet\r\n        console.log('valuesss', values);\r\n        const newVal = values\r\n        setValues(newVal)\r\n\r\n\r\n\r\n      } else {\r\n        set\r\n        values.diet.push(value)\r\n\r\n        //setValues(...values, )\r\n      }\r\n    } else if (e.target.type == \"checkbox\" && values[name]) {\r\n      delete values[name];\r\n      setValues({ ...values });\r\n    } else {\r\n      setValues({ ...values, [name]: value });\r\n    }\r\n  };\r\n  console.log('redular->', values);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setErrors(validate(values));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    for (const key in errors) {\r\n      if (!!errors[key].length) return;\r\n    }\r\n    isSubmitting && callback();\r\n  }, [errors]);\r\n  return { handleChange, handleSubmit, values, errors };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}