{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\projects\\\\fullstack-project\\\\client\\\\src\\\\components\\\\forms\\\\formikRegister.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./registerform.css\";\nimport { getData } from '../DAL/api';\nimport { Link, useHistory } from \"react-router-dom\"; // import { Form, Col, Button, Row } from \"react-bootstrap\";\n\nimport InputCreator from \"./InputCreator\";\nimport validate from \"../utills/validateInfo\";\nimport useForm from \"../utills/useForm\";\nimport ErrorMessages from \"../utills/ErrorMessages\";\nimport { FormControl, FormCheck } from 'react-bootstrap';\nimport { Formik, Form, Field } from 'formik';\nimport { TextField } from './TextField';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormikRegister = ({\n  recipe,\n  editUser\n}) => {\n  _s();\n\n  const [editMode, setEditMode] = useState(false);\n  const [diets, setDiets] = useState('');\n  const [chechboxOption, setCheckboxOption] = useState([]);\n  const history = useHistory();\n  useEffect(async () => {\n    if (recipe) setEditMode(true);\n    const options = [];\n    const fetchDiets = await getData('diets');\n    setDiets(fetchDiets);\n\n    for (let prop of fetchDiets) {\n      console.log(prop);\n      let obj = {\n        key: prop.name,\n        value: prop.id\n      };\n      options.push(obj);\n    }\n\n    setCheckboxOption(options);\n  }, []);\n  console.log(chechboxOption);\n  const validate = Yup.object({\n    firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n    lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n    email: Yup.string().email('Email is invalid').required('Email is required'),\n    password: Yup.string().min(6, 'Password must be at least 6 charaters').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must match').required('Confirm password is required'),\n    checkbox: Yup.array().required('required')\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      checkbox: []\n    },\n    validationSchema: validate,\n    onSubmit: values => {\n      console.log(values);\n    },\n    children: formik => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"my-4 font-weight-bold .display-4\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          firstName: '',\n          lastName: '',\n          email: ''\n        },\n        validationSchema: Yup.object({\n          firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n          lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n          email: Yup.string().email('Invalid email address').required('Required')\n        }),\n        onSubmit: (values, {\n          setSubmitting\n        }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n          }, 400);\n        },\n        children: formik => /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: formik.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"firstName\",\n            children: \"First Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"firstName\",\n            type: \"text\",\n            ...formik.getFieldProps('firstName')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), formik.touched.firstName && formik.errors.firstName ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: formik.errors.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"lastName\",\n            children: \"Last Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"lastName\",\n            type: \"text\",\n            ...formik.getFieldProps('lastName')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 29\n          }, this), formik.touched.lastName && formik.errors.lastName ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: formik.errors.lastName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 33\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"email\",\n            type: \"email\",\n            ...formik.getFieldProps('email')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this), formik.touched.email && formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: formik.errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 33\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 13\n  }, this);\n};\n\n_s(FormikRegister, \"O9g2YkT1+xX7VH3g2E8y8q5rgDE=\", false, function () {\n  return [useHistory];\n});\n\n_c = FormikRegister;\nexport default FormikRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormikRegister\");","map":{"version":3,"sources":["C:/Users/User/Documents/projects/fullstack-project/client/src/components/forms/formikRegister.js"],"names":["React","useEffect","useState","getData","Link","useHistory","InputCreator","validate","useForm","ErrorMessages","FormControl","FormCheck","Formik","Form","Field","TextField","Yup","FormikRegister","recipe","editUser","editMode","setEditMode","diets","setDiets","chechboxOption","setCheckboxOption","history","options","fetchDiets","prop","console","log","obj","key","name","value","id","push","object","firstName","string","max","required","lastName","email","password","min","confirmPassword","oneOf","ref","checkbox","array","values","formik","setSubmitting","setTimeout","alert","JSON","stringify","handleSubmit","getFieldProps","touched","errors"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./registerform.css\";\r\nimport { getData } from '../DAL/api'\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n// import { Form, Col, Button, Row } from \"react-bootstrap\";\r\nimport InputCreator from \"./InputCreator\";\r\nimport validate from \"../utills/validateInfo\";\r\nimport useForm from \"../utills/useForm\";\r\nimport ErrorMessages from \"../utills/ErrorMessages\";\r\nimport { FormControl, FormCheck } from 'react-bootstrap'\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { TextField } from './TextField';\r\n\r\nimport * as Yup from 'yup';\r\nconst FormikRegister = ({ recipe, editUser }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [diets, setDiets] = useState('');\r\n    const [chechboxOption, setCheckboxOption] = useState([])\r\n    const history = useHistory()\r\n\r\n    useEffect(async () => {\r\n        if (recipe) setEditMode(true);\r\n        const options = []\r\n        const fetchDiets = await getData('diets')\r\n        setDiets(fetchDiets);\r\n\r\n        for (let prop of fetchDiets) {\r\n            console.log(prop);\r\n\r\n            let obj = { key: prop.name, value: prop.id }\r\n            options.push(obj)\r\n        }\r\n        setCheckboxOption(options)\r\n\r\n    }, []);\r\n\r\n    console.log(chechboxOption);\r\n    const validate = Yup.object({\r\n        firstName: Yup.string()\r\n            .max(15, 'Must be 15 characters or less')\r\n            .required('Required'),\r\n        lastName: Yup.string()\r\n            .max(20, 'Must be 20 characters or less')\r\n            .required('Required'),\r\n        email: Yup.string()\r\n            .email('Email is invalid')\r\n            .required('Email is required'),\r\n        password: Yup.string()\r\n            .min(6, 'Password must be at least 6 charaters')\r\n            .required('Password is required'),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref('password'), null], 'Password must match')\r\n            .required('Confirm password is required'),\r\n        checkbox: Yup.array().required('required')\r\n    })\r\n\r\n    return (<Formik\r\n        initialValues={{\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            checkbox: []\r\n        }}\r\n        validationSchema={validate}\r\n        onSubmit={values => {\r\n            console.log(values)\r\n        }}>\r\n        {formik => (\r\n\r\n\r\n\r\n\r\n            <div className=\"form-inner\">\r\n                <h1 className=\"my-4 font-weight-bold .display-4\">Sign Up</h1>\r\n                <Formik\r\n                    initialValues={{ firstName: '', lastName: '', email: '' }}\r\n                    validationSchema={Yup.object({\r\n                        firstName: Yup.string()\r\n                            .max(15, 'Must be 15 characters or less')\r\n                            .required('Required'),\r\n                        lastName: Yup.string()\r\n                            .max(20, 'Must be 20 characters or less')\r\n                            .required('Required'),\r\n                        email: Yup.string().email('Invalid email address').required('Required'),\r\n                    })}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setTimeout(() => {\r\n                            alert(JSON.stringify(values, null, 2));\r\n                            setSubmitting(false);\r\n                        }, 400);\r\n                    }}\r\n                >\r\n                    {formik => (\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <label htmlFor=\"firstName\">First Name</label>\r\n                            <input\r\n                                id=\"firstName\"\r\n                                type=\"text\"\r\n                                {...formik.getFieldProps('firstName')}\r\n                            />\r\n                            {formik.touched.firstName && formik.errors.firstName ? (\r\n                                <div>{formik.errors.firstName}</div>\r\n                            ) : null}\r\n\r\n                            <label htmlFor=\"lastName\">Last Name</label>\r\n                            <input\r\n                                id=\"lastName\"\r\n                                type=\"text\"\r\n                                {...formik.getFieldProps('lastName')}\r\n                            />\r\n                            {formik.touched.lastName && formik.errors.lastName ? (\r\n                                <div>{formik.errors.lastName}</div>\r\n                            ) : null}\r\n\r\n                            <label htmlFor=\"email\">Email Address</label>\r\n                            <input id=\"email\" type=\"email\" {...formik.getFieldProps('email')} />\r\n                            {formik.touched.email && formik.errors.email ? (\r\n                                <div>{formik.errors.email}</div>\r\n                            ) : null}\r\n\r\n                            <button type=\"submit\">Submit</button>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )}\r\n    </Formik>\r\n    )\r\n}\r\nexport default FormikRegister"]},"metadata":{},"sourceType":"module"}